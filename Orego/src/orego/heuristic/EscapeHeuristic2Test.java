package orego.heuristic;

import static orego.core.Colors.*;
import static orego.core.Coordinates.BOARD_WIDTH;
import static orego.core.Coordinates.at;
import static org.junit.Assert.*;

import orego.core.Board;

import org.junit.Before;
import org.junit.Test;

public class EscapeHeuristic2Test {

	private Board board;

	private EscapeHeuristic2 heuristic;

	@Before
	public void setUp() throws Exception {
		board = new Board();
		heuristic = new EscapeHeuristic2(1);
	}

	@Test
	public void testEvaluate1() {
		String[] problem = new String[] { //
				"...................",// 19
				"...................",// 18
				"...................",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				"...................",// 12
				"...................",// 11
				"...................",// 10
				"...................",// 9
				"...................",// 8
				"...................",// 7
				"...................",// 6
				"...................",// 5
				"...................",// 4
				"..............O##..",// 3
				"..............O#O#.",// 2
				"...............O..."// 1
		// ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(1, heuristic.evaluate(at("r1"), board));
	}

	@Test
	public void testSaveMultipleStones() {
		String[] problem = new String[] { 
				"...................",// 19
				"...................",// 18
				".....O.............",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				"............#......",// 12
				"..........#O#......",// 11
				"..........#O#......",// 10
				"..........#O#......",// 9
				"..........#O#......",// 8
				"...........#.......",// 7
				"...................",// 6
				"...................",// 5
				"...................",// 4
				"...................",// 3
				"...................",// 2
				"..................."// 1
		      // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(8, heuristic.evaluate(at("m12"), board));
	}
	
	@Test
	public void testSaveMultipleStones2() {
		String[] problem = new String[] { 
				"...................",// 19
				"...................",// 18
				".....O.............",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				"...................",// 12
				"..........#O#......",// 11
				"..........#O#......",// 10
				"..........#O#......",// 9
				"..........#O#......",// 8
				"...........#.......",// 7
				"...................",// 6
				"...................",// 5
				"...................",// 4
				"...................",// 3
				"...................",// 2
				"..................."// 1
		      // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(12, heuristic.evaluate(at("m12"), board));
	}
	
	@Test
	public void testConnectGroups() {
		String[] problem = new String[] { 
				"...................",// 19
				"...........O.......",// 18
				".....O.....O.......",// 17
				"..........#O#......",// 16
				"..........#O#......",// 15
				"..........#O#......",// 14
				"..........#O#......",// 13
				"..........#.#......",// 12
				"..........#O#......",// 11
				"..........#O#......",// 10
				"..........#O#......",// 9
				"..........#O#......",// 8
				"...........#.......",// 7
				"...................",// 6
				"...................",// 5
				"...................",// 4
				"...................",// 3
				"...................",// 2
				"..................."// 1
		      // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(16, heuristic.evaluate(at("m12"), board));
	}
	
	@Test
	public void testConnectGroups2() {
		String[] problem = new String[] { 
				"...................",// 19
				"...........O.......",// 18
				".....O.....O.......",// 17
				"..........#O#......",// 16
				"..........#O#......",// 15
				"..........#O#......",// 14
				"..........#O#......",// 13
				"............#......",// 12
				"..........#O#......",// 11
				"..........#O#......",// 10
				"..........#O#......",// 9
				"..........#O#......",// 8
				"...........#.......",// 7
				"...................",// 6
				"...................",// 5
				"...................",// 4
				"...................",// 3
				"...................",// 2
				"..................."// 1
		      // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(20, heuristic.evaluate(at("m12"), board));
	}
	
	@Test
	public void testConnectGroups3() {
		String[] problem = new String[] { 
				"...................",// 19
				"...........O.......",// 18
				".....O.....O.......",// 17
				"..........#O#......",// 16
				"..........#O#......",// 15
				"..........#O#......",// 14
				"..........#O####...",// 13
				"............OOOO#..",// 12
				"..........#O####...",// 11
				"..........#O#......",// 10
				"..........#O#......",// 9
				"..........#O#......",// 8
				"...........#.......",// 7
				"...................",// 6
				"...................",// 5
				"...................",// 4
				"...................",// 3
				"...................",// 2
				"..................."// 1
		      // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(40, heuristic.evaluate(at("m12"), board));
	}

	@Test
	public void testConnectGroups4() {
		String[] problem = new String[] { 
				"...................",// 19
				"...................",// 18
				"...................",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				".........O#........",// 12
				"...######O#........",// 11
				"...#OOOOO.O#.......",// 10
				"...#O#####O#.......",// 9
				"...#O#...#O#.......",// 8
				"...#O#####O#.......",// 7
				"...#O#...#O#.......",// 6
				"...#O#####O#.......",// 5
				"...#OOOOOOO#.......",// 4
				"....#######........",// 3
				"...................",// 2
				"..................."// 1
		      // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(23, heuristic.evaluate(at("k10"), board));
	}
	
	@Test
	public void testCapture() {
		String[] problem = new String[] { //
				"...................",// 19
				"...................",// 18
				"...................",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				"...................",// 12
				"...................",// 11
				"...................",// 10
				"...................",// 9
				"...................",// 8
				"...................",// 7
				"...................",// 6
				"..............#O...",// 5
				"..............O#...",// 4
				"..............#O...",// 3
				"...................",// 2
				"..................."// 1
			  // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(3, heuristic.evaluate(at("o4"), board));
		assertEquals(4, heuristic.evaluate(at("r4"), board));
		// Do it some additional times to catch "memory leak"
		assertEquals(4, heuristic.evaluate(at("r4"), board));
		assertEquals(4, heuristic.evaluate(at("r4"), board));
		assertEquals(4, heuristic.evaluate(at("r4"), board));
		assertEquals(4, heuristic.evaluate(at("r4"), board));
		assertEquals(4, heuristic.evaluate(at("r4"), board));
	}
	
	@Test
	public void testCapture2() {
		String[] problem = new String[] { //
				"...................",// 19
				"...................",// 18
				"...................",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				"...................",// 12
				"...................",// 11
				"...................",// 10
				"...................",// 9
				"...................",// 8
				"...................",// 7
				"...................",// 6
				".............##OO..",// 5
				".............OO##O.",// 4
				".............##O...",// 3
				"...................",// 2
				"..................."// 1
			  // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(6, heuristic.evaluate(at("r3"), board));
	}
	
	@Test
	public void testCapture3() {
		String[] problem = new String[] { //
				"...................",// 19
				"...................",// 18
				"...................",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				"...................",// 12
				"...................",// 11
				"...................",// 10
				"...................",// 9
				"...................",// 8
				"...................",// 7
				".............OOO...",// 6
				"............O###...",// 5
				".............OO##O.",// 4
				".............##OO..",// 3
				"...................",// 2
				"..................."// 1
			  // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(17, heuristic.evaluate(at("r5"), board));
	}
	
	@Test
	public void testCapture4() {
		String[] problem = new String[] { //
				"...................",// 19
				"...................",// 18
				"...................",// 17
				"...................",// 16
				"...................",// 15
				"...................",// 14
				"...................",// 13
				"...................",// 12
				"...................",// 11
				"...................",// 10
				"...................",// 9
				"...................",// 8
				".............###...",// 7
				"............#OOO...",// 6
				"............O###...",// 5
				".............OO#O..",// 4
				".............##OO..",// 3
				"...................",// 2
				"..................."// 1
			  // ABCDEFGHJKLMNOPQRST
		};
		board.setUpProblem(WHITE, problem);
		assertEquals(79, heuristic.evaluate(at("r5"), board));
	}

}
