package orego.neural;

import static org.junit.Assert.*;
import static orego.core.Colors.*;
import orego.core.Board;
import orego.mcts.McRunnable;
import orego.mcts.MctsPlayer;
import orego.policy.RandomPolicy;
import static orego.core.Coordinates.*;

import org.junit.Before;
import org.junit.Test;

public class NeuralPlayerTest {

	private NeuralPlayer player;

	private McRunnable runnable;

	@Before
	public void setUp() throws Exception {
		player = new NeuralPlayer();
		player.setProperty("hidden", "10");
		player.setProperty("learn", "1.0");
		player.reset();
		runnable = (McRunnable) player.getRunnable(0);
	}

	/**
	 * Incorporates the indicates moves as if they had been generated by a real
	 * playout. Two passes are added to the end.
	 */
	protected void fakeRun(int winner, String... labels) {
		int[] moves = new int[labels.length + 2];
		int i;
		for (i = 0; i < labels.length; i++) {
			moves[i] = at(labels[i]);
		}
		moves[i] = PASS;
		moves[i + 1] = PASS;
		McRunnable runnable = new McRunnable(player, new RandomPolicy());
		runnable.copyDataFrom(player.getBoard());
		for (int p : moves) {
			runnable.acceptMove(p);
		}
		player.incorporateRun(winner, runnable);
	}

	@Test
	public void testIncorporateRun() {
		if (BOARD_WIDTH == 9) {
			String[] problem = { //
			".#######.", // 9
					"#########", // 8
					"####.####", // 7
					"#########", // 6
					".#######.", // 5
					"OOOOOOOOO", // 4
					"OOOOOOOOO", // 3
					"OOOO.OOOO", // 2
					".OOOOOOO." // 1
			// ///// ABCDEFGHJ
			};
			player.getBoard().setUpProblem(WHITE, problem);
			player.generateMovesToFrontier(runnable);
			fakeRun(WHITE, "e2", "e7", "a5", "j5");
			fakeRun(WHITE, "e2", "e7", "a5", "j5");
			fakeRun(WHITE, "e2", "e7", "a5", "j5");
			fakeRun(WHITE, "e2", "e7", "a5", "j5");
			fakeRun(WHITE, "e2", "e7", "a5", "j5");
			fakeRun(WHITE, "e2", "e7", "a5", "j5");
			fakeRun(BLACK, "e2", "e7", "j5", "a5");
			fakeRun(BLACK, "e2", "e7", "j5", "a5");
			fakeRun(BLACK, "e2", "e7", "j5", "a5");
			fakeRun(BLACK, "e2", "e7", "j5", "a5");
			fakeRun(BLACK, "e2", "e7", "j5", "a5");
			fakeRun(BLACK, "e2", "e7", "j5", "a5");
			assertEquals(at("a5"), player.bestMove());
		}
	}

	@Test
	public void testIncorporateRun1() {
		double before = player.getNetwork().evaluate(BLACK, at("c1"),
				player.getBoard(), player.getBoard().getTurn());
		fakeRun(WHITE, "a1", "b1", "c1", "d1");
		double after = player.getNetwork().evaluate(BLACK, at("c1"),
				player.getBoard(), player.getBoard().getTurn());
		assertTrue(after < before);
	}

	@Test
	public void testIncorporateRun2() {
		player.getBoard().play("d3");
		player.getBoard().play("c3");
		player.getBoard().play("b3");
		player.getBoard().play("a3");
		double before = player.getNetwork().evaluate(WHITE, at("b1"),
				player.getBoard(), player.getBoard().getTurn());
		fakeRun(WHITE, "a1", "b1", "c1", "d1");
		double after = player.getNetwork().evaluate(WHITE, at("b1"),
				player.getBoard(), player.getBoard().getTurn());
		assertTrue(after > before);
	}

	@Test
	public void testIncorporateRun3() {
		double before = player.getNetwork().evaluate(WHITE, at("b1"),
				player.getBoard(), player.getBoard().getTurn());
		fakeRun(BLACK, "a1", "b1", "c1", "d1");
		double after = player.getNetwork().evaluate(WHITE, at("b1"),
				player.getBoard(), player.getBoard().getTurn());
		assertTrue(before > after);
	}

	@Test
	public void testBestStoredMove() {
		for (int i = 0; i < 1000; i++) {
			fakeRun(BLACK, "c4", "c5", "c6", "c7");
			fakeRun(BLACK, "c4", "c5", "c6", "c7");
			fakeRun(WHITE, "c5", "c4", "c6", "c7");
		}
		assertEquals(at("c4"), player.bestStoredMove());
	}
}
